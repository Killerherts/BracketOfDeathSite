services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: bod-mongodb
    restart: unless-stopped
    command: ["mongod", "--logpath", "/var/log/mongodb/mongod.log", "--logappend", "--quiet"]
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      # Use Docker volume instead of bind mount to avoid permission issues
      - mongodb-data:/data/db
      # Log directory
      - mongodb-logs:/var/log/mongodb
      # Initialization scripts
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - bod-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Data Initialization Service (runs once)
  data-init:
    build:
      context: .
      dockerfile: scripts/Dockerfile.data-init
    container_name: bod-data-init
    depends_on:
      mongodb:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MONGODB_URI: ${MONGODB_URI}
    volumes:
      - ./json/fixed:/app/data:ro
      - ./data/init-status:/app/status
    networks:
      - bod-network
    restart: "no"

  # Backend API
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: bod-backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      data-init:
        condition: service_completed_successfully
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACKEND_PORT}
      MONGODB_URI: ${MONGODB_URI}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - "${BACKEND_EXTERNAL_PORT}:${BACKEND_PORT}"
    volumes:
      # Backend logs
      - ./data/logs/backend:/app/logs
    networks:
      - bod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: bod-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env
    environment:
      VITE_API_URL: ${VITE_API_URL}
    ports:
      - "${FRONTEND_EXTERNAL_PORT}:${FRONTEND_PORT}"
    networks:
      - bod-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  bod-network:
    driver: bridge
    name: bob-network

volumes:
  mongodb-data:
    driver: local
  mongodb-logs:
    driver: local